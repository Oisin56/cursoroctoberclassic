rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is the current editor
    function isCurrentEditor(eventId) {
      let accessDoc = get(/databases/$(database)/documents/events/$(eventId)/controls/access);
      return request.auth != null && accessDoc.data.currentEditorUid == request.auth.uid;
    }
    
    // Events collection - read by all, write by editor
    match /events/{eventId} {
      allow read: if true;
      allow write: if isCurrentEditor(eventId);
      
      // Controls subcollection for editor access management
      match /controls/access {
        allow read: if true;
        // Allow write if user is setting themselves as editor or releasing the lock
        allow write: if request.auth != null && 
                       (request.resource.data.currentEditorUid == request.auth.uid || 
                        request.resource.data.currentEditorUid == null);
      }
    }
    
    // Courses collection - read by all, write by editor of any event
    match /courses/{courseId} {
      allow read: if true;
      // Allow write if user is editor of the october-classic-2025 event
      allow write: if isCurrentEditor('october-classic-2025');
    }
    
    // Rounds collection - read by all, write by editor
    match /rounds/{roundId} {
      allow read: if true;
      allow write: if isCurrentEditor(resource.data.eventId);
    }
    
    // Scores collection - read by all, write by editor
    match /scores/{scoreId} {
      allow read: if true;
      allow write: if exists(/databases/$(database)/documents/rounds/$(resource.data.roundId)) &&
                     isCurrentEditor(get(/databases/$(database)/documents/rounds/$(resource.data.roundId)).data.eventId);
    }
  }
}

